#!/usr/bin/env python
import os
import re
import sys
import subprocess

PROJECT_DIRECTORY = os.path.realpath(os.path.curdir)

# if user opts out of using django default files, these will be removed
django_default_files = [
    "{{ cookiecutter.project_slug }}/__init__.py",
    "{{ cookiecutter.project_slug }}/asgi.py",
    "{{ cookiecutter.project_slug }}/settings.py",
    "{{ cookiecutter.project_slug }}/urls.py",
    "{{ cookiecutter.project_slug }}/wsgi.py",
    "manage.py",
]


def change_sphinx_django_path():
    # Appears after user opts out of django default files, therefore no immediate condition is needed
    input_prompt = '''
You have opted to remove the Django default files.
A Sphinx extension being used (sphinxcontrib-django) requires the "django_settings" path
to be set in the conf.py file.

Note that conf.py file can be found in {{ cookiecutter.project_slug }}/docs/source/conf.py

To continue, please enter the number corresponding to one of the following options:

1. Keep the autogenerated path: "{{ cookiecutter.project_slug }}.settings"
2. Remove the autogenerated path and add one manually.
3. Enter the new path (you will be prompted to enter the new path after selecting this option).\n
'''
    user_choice = input(input_prompt)
    if user_choice not in ['1', '2', '3']:
        while user_choice not in ['1', '2', '3']:
            user_choice = input("Please type \"1\", \"2\", or \"3\" and press enter.\n")

    response = {"1": {"response": "The autogenerated path has been kept."},
                "2": {"response": "The autogenerated path has been removed.\nA \"TODO\" comment has been added in its place.",
                      "replaced": " # TODO: Add Django settings path."},
                "3": {"response": "Path updated successfully",
                      "replaced": "Please enter the new path (formatted as \"my_project.settings\").\n"}}

    if user_choice != "1":
        file_path = "docs/source/conf.py"
        if user_choice =='3':
            response[user_choice]["replaced"] = input(response[user_choice]["replaced"])
        replace_var_val(file_path, "django_settings", response[user_choice]["replaced"])

    print(response[user_choice]['response'])


def replace_var_val(file_path, var_name, new_var_val):
    with open(file_path, "r") as file:
        content = file.read()

    # Construct the pattern to match the variable assignment
    pattern = r"{} = .*".format(re.escape(var_name))

    # Replace the variable assignment with the new value
    replaced_content = re.sub(pattern, "{} = {}".format(var_name, new_var_val), content)

    with open(file_path, "w") as file:
        file.write(replaced_content)


def get_py_ver():
    version_info = sys.version_info
    version_string = f"{version_info.major}.{version_info.minor}.{version_info.micro}"
    return version_string


def remove_file(filepath):
    os.remove(os.path.join(PROJECT_DIRECTORY, filepath))


def generate_django_secret_key():

    subprocess.run(['pip', 'install', '-q', 'django'])
    from django.core.management.utils import get_random_secret_key
    django_secret = get_random_secret_key()

    with open('{{ cookiecutter.project_slug }}/settings.py', "r") as file:
        content = file.read()

    # Construct the pattern to match the variable assignment
    pattern = r"{} = .*".format(re.escape('SECRET_KEY'))

    # Replace the variable assignment with the new value
    replaced_content = re.sub(pattern, "{} = '{}'".format('SECRET_KEY', django_secret), content)

    with open('{{ cookiecutter.project_slug }}/settings.py', "w") as file:
        file.write(replaced_content)


if __name__ == '__main__':
    if '{{ cookiecutter.create_django_default_files }}'.lower() == 'y':
        if '{{ cookiecutter.generate_django_secret_key }}'.lower() == 'y':
            generate_django_secret_key()
    else:
        change_sphinx_django_path()
        for filepath in django_default_files:
            remove_file(filepath)


    if '{{ cookiecutter.open_source_license }}' == 'None':
        os.remove('LICENSE')

    if '{{ cookiecutter.generate_requirements_files }}'.lower() == 'y':
        subprocess.run(['pip', 'install', 'pip-tools'])
        subprocess.run(['pip-compile', '-o', 'requirements.txt', 'pyproject.toml', '--resolver=backtracking'])
        subprocess.run(['pip-compile', '-o', 'requirements_dev.txt', 'pyproject.toml', '--resolver=backtracking', '--all-extras'])
        subprocess.run(['pip-compile', '-o', 'docs/requirements_docs.txt', 'pyproject.toml', '--resolver=backtracking', '--extra=docs'])

        if '{{ cookiecutter.install_requirements }}'.lower() == 'y':
            subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
            subprocess.run(['pip', 'install', '-r', 'requirements_dev.txt'])
