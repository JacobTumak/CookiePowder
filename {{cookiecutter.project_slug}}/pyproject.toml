[build-system]
requires = ["setuptools", "wheel", "twine"]
build-backend = "setuptools.build_meta"

[project]
version = '{{cookiecutter.version}}'
name = '{{cookiecutter.project_slug}}'
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
authors = [
    {name = '{{cookiecutter.github_username}}', email = '{{cookiecutter.email}}' }
]
maintainers = [
    {name = '{{cookiecutter.github_username}}', email = '{{cookiecutter.email}}' }
]
keywords = ['{{ cookiecutter.project_slug }}',]
{% if cookiecutter.open_source_license == 'MIT license' -%}
license = {text = "MIT license"}
{% elif cookiecutter.open_source_license == 'BSD license' -%}
license = {text = "BSD license"}
{% elif cookiecutter.open_source_license == 'ISC license' -%}
license = {text = "ISC license"}
{% elif cookiecutter.open_source_license == 'Apache Software License 2.0' -%}
license = {text = "Apache Software License 2.0"}
{% elif cookiecutter.open_source_license == 'GNU General Public License v3' -%}
license = {text = "GNU General Public License v3"}
{% else -%}
license = {text = "Proprietary"}
{% endif %}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: {% if cookiecutter.open_source_license != 'Not open source' -%} OSI Approved :: {% endif %} {{cookiecutter.open_source_license}}",
    "Programming Language :: Python :: 3.7", # TODO: Check python version compatibility after testing. Remove incompatibles.
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Framework :: Django",
]
requires-python = '{{cookiecutter.python_version}}'
dependencies = [
    'django >= 2.0',
    'typing-extensions ~= 4.6.3',
    'pip-tools ~= 6.13.0',
]

[project.optional-dependencies]
dev = [
    'bumpver >= 2023.1124',
    'build >= 0.10.0',
    'invoke >= 2.1.3',
    {% if cookiecutter.command_line_interface != 'No Cli'-%}'{{cookiecutter.command_line_interface}}',{% endif %}
    ]
lint = [
    'flake8 >= 6.0.0',
    'black >= 23.3.0',
]
docs = [
    'sphinx >= 7.0.1',
    'myst-parser >= 2.0.0',
]
test = [
    'pytest-cov >= 4.1.0',
    'pytest-django >= 4.5.2',
    'tox >= 4.5.1',
]

[project.urls]
Homepage = 'https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}'
Repository = 'https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}'

[project.scripts]
'manage.py' = '{{cookiecutter.project_slug}}:django_manage'

[tool.bumpver]
current_version = '{{cookiecutter.version}}'
version_pattern = 'MAJOR.MINOR.PATCH'
commit_message = 'Version bump: {old_version} -> {new_version}'
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [ "current_version = \"{version}\"",]
'README.md' = [ "Version: {version}",]
'polls/__init__.py' = [ "__version__ = \"{version}\"",]
'docs/sphinx/conf.py' = [ "release = '{version}'",]

[tool.setuptools]
packages = [
    # TODO: Change if needed. This should point to the directory intended to be packaged
    '{{cookiecutter.project_slug}}',
]

[tool.setuptools.dynamic.version]
attr = '{{cookiecutter.project_slug}}.__version__'
